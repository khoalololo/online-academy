<div class="max-w-7xl mx-auto">
  <!-- Page Header -->
  <div class="mb-8">
    <nav class="mb-4 text-sm">
      <ol class="flex items-center space-x-2 text-gray-600">
        <li><a href="/instructor/courses" class="hover:text-indigo-600">My Courses</a></li>
        <li><span class="mx-2">/</span></li>
        <li class="text-gray-900 font-semibold">{{course.proname}}</li>
      </ol>
    </nav>

    <div class="flex items-center justify-between">
      <div>
        <h1 class="text-3xl font-bold text-gray-900">Manage Lessons</h1>
        <p class="mt-2 text-gray-600">{{course.proname}}</p>
      </div>
      <div class="flex space-x-3">
        <a href="/instructor/courses/{{course.proid}}/edit"
           class="px-4 py-2 bg-gray-200 text-gray-700 font-semibold rounded-lg hover:bg-gray-300 transition-colors">
          Edit Course
        </a>
        <a href="/products/{{course.proid}}"
           class="px-4 py-2 bg-indigo-100 text-indigo-700 font-semibold rounded-lg hover:bg-indigo-200 transition-colors">
          View Course
        </a>
      </div>
    </div>
  </div>

  <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
    <!-- Lessons List -->
    <div class="lg:col-span-2">
      <div class="bg-white rounded-xl shadow-md overflow-hidden">
        <div class="p-6 bg-gradient-to-r from-indigo-600 to-purple-600 text-white">
          <div class="flex items-center justify-between">
            <div>
              <h2 class="text-xl font-bold">Course Content</h2>
              <p class="text-sm text-indigo-100 mt-1">{{lessons.length}} lessons</p>
            </div>
            <button onclick="showAddLessonModal()"
                    class="px-4 py-2 bg-white text-indigo-600 font-semibold rounded-lg hover:bg-indigo-50 transition-colors">
              <svg class="w-5 h-5 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
              </svg>
              Add Lesson
            </button>
          </div>
        </div>

        <div id="lessonsList" class="divide-y divide-gray-200">
          {{#if lessons.length}}
            {{#each lessons}}
            <div class="p-6 hover:bg-gray-50 transition-colors flex items-start justify-between" data-lesson-id="{{this.id}}">
              <div class="flex items-start space-x-4">
                <div class="cursor-move text-gray-400 hover:text-gray-600 mt-1">
                  <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z"/>
                  </svg>
                </div>

                <div>
                  <h3 class="font-semibold text-gray-900">{{this.title}}</h3>
                  {{#if this.description}}
                    <p class="text-sm text-gray-600 mt-1">{{this.description}}</p>
                  {{/if}}
                  <div class="flex items-center mt-2 space-x-4 text-xs text-gray-500">
                    {{#if this.duration}}
                      <span class="flex items-center">
                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                        </svg>
                        {{div this.duration 60}} min
                      </span>
                    {{/if}}
                    {{#if this.is_preview}}
                      <span class="bg-green-100 text-green-800 px-2 py-0.5 rounded font-semibold">Preview</span>
                    {{/if}}
                  </div>
                </div>
              </div>

              <div class="flex items-center space-x-2">
                <button onclick="editLesson({{this.id}})"
                        class="p-2 text-blue-600 hover:bg-blue-50 rounded-lg transition">
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                          d="M15.232 5.232l3.536 3.536M9 13l6-6 3 3-6 6H9v-3z"/>
                  </svg>
                </button>
                <button onclick="deleteLesson({{this.id}})"
                        class="p-2 text-red-600 hover:bg-red-50 rounded-lg transition">
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                          d="M6 18L18 6M6 6l12 12"/>
                  </svg>
                </button>
              </div>
            </div>
            {{/each}}
          {{else}}
            <div class="p-8 text-center text-gray-500">
              <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                      d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"/>
              </svg>
              <p class="mt-2">No lessons yet. Click <strong>Add Lesson</strong> to start building your course.</p>
            </div>
          {{/if}}
        </div>
      </div>
    </div>

    <!-- Course Info Sidebar -->
    <div class="lg:col-span-1">
      <div class="bg-white rounded-xl shadow-md p-6">
        <h3 class="text-lg font-semibold text-gray-900 mb-2">Course Overview</h3>
        <p class="text-gray-700">{{course.tinydes}}</p>
        <div class="mt-4">
          <p class="text-sm text-gray-500">Last updated: {{formatDate course.last_updated}}</p>
          <p class="text-sm text-gray-500 mt-1">Total lessons: {{lessons.length}}</p>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Add/Edit Lesson Modal -->
<div id="lessonModal" class="hidden fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50">
  <div class="bg-white rounded-xl shadow-lg w-full max-w-lg p-6">
    <h2 id="modalTitle" class="text-xl font-bold text-gray-900 mb-4">Add Lesson</h2>
    <form id="lessonForm" class="space-y-4">
      <input type="hidden" id="lessonId">

      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">Title</label>
        <input id="lessonTitle" type="text" required
               class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
      </div>

      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">Description</label>
        <textarea id="lessonDescription" rows="3"
                  class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"></textarea>
      </div>

      <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">Video URL</label>
        <input id="lessonVideoUrl" type="url"
               class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
      </div>

      <div class="grid grid-cols-2 gap-4">
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Duration (seconds)</label>
          <input id="lessonDuration" type="number" min="0"
                 class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent">
        </div>
        <div class="flex items-center space-x-2 mt-6">
          <input id="lessonPreview" type="checkbox" class="h-4 w-4 text-indigo-600 rounded">
          <label for="lessonPreview" class="text-sm font-medium text-gray-700">Preview Lesson</label>
        </div>
      </div>

      <div class="flex justify-end space-x-3 pt-4">
        <button type="button" onclick="closeLessonModal()"
                class="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition">Cancel</button>
        <button type="submit"
                class="px-4 py-2 bg-indigo-600 text-white font-semibold rounded-lg hover:bg-indigo-700 transition">Save</button>
      </div>
    </form>
  </div>
</div>

{{#section 'js'}}
<script>
function showAddLessonModal() {
  document.getElementById('lessonId').value = '';
  document.getElementById('lessonForm').reset();
  document.getElementById('modalTitle').innerText = 'Add Lesson';
  document.getElementById('lessonModal').classList.remove('hidden');
}

function closeLessonModal() {
  document.getElementById('lessonModal').classList.add('hidden');
}

function editLesson(id) {
  const lesson = [...document.querySelectorAll('[data-lesson-id]')]
    .map(div => ({ id: parseInt(div.dataset.lessonId), title: div.querySelector('h3').textContent.trim() }))
    .find(l => l.id === id);
  if (!lesson) return;

  fetch(`/instructor/lessons/${id}/get`)
    .then(res => res.json())
    .then(data => {
      document.getElementById('lessonId').value = data.id;
      document.getElementById('lessonTitle').value = data.title || '';
      document.getElementById('lessonDescription').value = data.description || '';
      document.getElementById('lessonVideoUrl').value = data.video_url || '';
      document.getElementById('lessonDuration').value = data.duration || '';
      document.getElementById('lessonPreview').checked = !!data.is_preview;
      document.getElementById('modalTitle').innerText = 'Edit Lesson';
      document.getElementById('lessonModal').classList.remove('hidden');
    });
}

function deleteLesson(id) {
  Swal.fire({
    title: 'Are you sure?',
    text: 'This lesson will be permanently deleted.',
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#EF4444',
    cancelButtonColor: '#6B7280',
    confirmButtonText: 'Yes, delete it'
  }).then(async (result) => {
    if (result.isConfirmed) {
      const res = await fetch(`/instructor/lessons/${id}/delete`, { method: 'DELETE' });
      if (res.ok) {
        Swal.fire('Deleted!', 'The lesson has been removed.', 'success').then(() => location.reload());
      } else {
        Swal.fire('Error', 'Failed to delete lesson.', 'error');
      }
    }
  });
}

document.getElementById('lessonForm').addEventListener('submit', async e => {
  e.preventDefault();
  const id = document.getElementById('lessonId').value;
  const payload = {
    title: document.getElementById('lessonTitle').value.trim(),
    description: document.getElementById('lessonDescription').value.trim(),
    video_url: document.getElementById('lessonVideoUrl').value.trim(),
    duration: parseInt(document.getElementById('lessonDuration').value) || 0,
    is_preview: document.getElementById('lessonPreview').checked
  };

  const method = id ? 'PUT' : 'POST';
  const url = id ? `/instructor/lessons/${id}/update` : `/instructor/lessons/{{course.proid}}/add`;

  const res = await fetch(url, {
    method,
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(payload)
  });

  if (res.ok) {
    Swal.fire('Success', 'Lesson saved successfully!', 'success').then(() => location.reload());
  } else {
    Swal.fire('Error', 'Failed to save lesson.', 'error');
  }
});
</script>
{{/section}}
